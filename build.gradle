plugins {
 	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id "com.github.node-gradle.node" version "3.5.1" 
}

node { 
  download = true
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

task appNpmInstall(type: NpmTask) {
  dependsOn "npmSetup"
  description = "Installs dependencies from package.json"
  workingDir = file("${projectDir}/src/main/resources/static");  
  args = ["install"]
}

// CLI 환경에서 'build' 작업을 수행할 때 사용하는 설정
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8' 
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

eclipse {
    project {
        name = "myapp"
    }
    jdt {  
      sourceCompatibility = 11
      targetCompatibility = 11
      javaRuntimeName = "JavaSE-11"
    }
}


application {
    mainClass = 'com.example.demo'
}

// React build 설정
def webappDir = "$projectDir/reactjs"

processResources {
  dependsOn "copyWebApp"
  //dependsOn "appNpmInstall"
}


task copyWebApp(type: Copy) {
    dependsOn "buildReact"
    from "$webappDir/build"
    into "$projectDir/src/main/resources/static"
}

task buildReact(type: Exec) {
  dependsOn "installReact"
  workingDir "$webappDir"
  inputs.dir "$webappDir"
  group = BasePlugin.BUILD_GROUP
  if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")) {
    commandLine "npm.cmd", "run-script", "build"
  } else {
    commandLine "npm", "run-script", "build"
  }
}

task installReact(type: Exec) {
  workingDir "$webappDir"
  inputs.dir "$webappDir"
  group = BasePlugin.BUILD_GROUP
  if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")) {
    commandLine "npm.cmd", "audit", "fix"
    commandLine "npm.cmd", "install"
  } else {
    commandLine "npm", "audit", "fix"
    commandLine "npm", "install"
  }
}